name: Update AUR Package

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  update-aur:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    container:
      image: archlinux:latest
    
    steps:
      - name: Install dependencies
        run: |
          pacman -Syu --noconfirm git openssh base-devel curl xdg-utils

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for new version
        id: version
        run: |
          # Fetch latest version from Factory's install script
          LATEST=$(curl -fsSL https://app.factory.ai/cli | grep '^VER=' | head -1 | cut -d'"' -f2)
          CURRENT=$(grep '^pkgver=' PKGBUILD | cut -d'=' -f2)
          CURRENT_REL=$(grep '^pkgrel=' PKGBUILD | cut -d'=' -f2)
          
          echo "Latest: $LATEST"
          echo "Current: $CURRENT-$CURRENT_REL"
          echo "latest=$LATEST" >> $GITHUB_OUTPUT
          echo "current=$CURRENT" >> $GITHUB_OUTPUT
          echo "current_rel=$CURRENT_REL" >> $GITHUB_OUTPUT
          
          # Check if version changed OR if we need to force push (manual trigger)
          if [ "$LATEST" != "$CURRENT" ]; then
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "reason=version_bump" >> $GITHUB_OUTPUT
            echo "🆕 New version detected: $LATEST"
          elif [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ]; then
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "reason=manual_trigger" >> $GITHUB_OUTPUT
            echo "🔄 Manual trigger - will push current package"
          else
            if [ "$GITHUB_EVENT_NAME" = "push" ] && (git diff --name-only HEAD~1 | grep -q '^PKGBUILD$' || git diff --name-only HEAD~1 | grep -q '^\.SRCINFO$'); then
              echo "update_needed=true" >> $GITHUB_OUTPUT
              echo "reason=packaging_update" >> $GITHUB_OUTPUT
              echo "📦 Packaging files updated, publishing to AUR"
            else
              echo "update_needed=false" >> $GITHUB_OUTPUT
              echo "✅ Already up to date at $CURRENT-$CURRENT_REL"
            fi
          fi

      - name: Download and get checksums
        if: steps.version.outputs.update_needed == 'true' && steps.version.outputs.reason == 'version_bump'
        id: checksums
        run: |
          VERSION="${{ steps.version.outputs.latest }}"
          
          curl -fsSL -o droid-x64 "https://downloads.factory.ai/factory-cli/releases/${VERSION}/linux/x64/droid"
          curl -fsSL -o droid-arm64 "https://downloads.factory.ai/factory-cli/releases/${VERSION}/linux/arm64/droid"
          curl -fsSL -o rg-x64 "https://downloads.factory.ai/ripgrep/linux/x64/rg"
          curl -fsSL -o rg-arm64 "https://downloads.factory.ai/ripgrep/linux/arm64/rg"
          
          SHA_DROID_X64=$(sha256sum droid-x64 | awk '{print $1}')
          SHA_DROID_ARM64=$(sha256sum droid-arm64 | awk '{print $1}')
          SHA_RG_X64=$(sha256sum rg-x64 | awk '{print $1}')
          SHA_RG_ARM64=$(sha256sum rg-arm64 | awk '{print $1}')
          
          echo "sha_droid_x64=$SHA_DROID_X64" >> $GITHUB_OUTPUT
          echo "sha_droid_arm64=$SHA_DROID_ARM64" >> $GITHUB_OUTPUT
          echo "sha_rg_x64=$SHA_RG_X64" >> $GITHUB_OUTPUT
          echo "sha_rg_arm64=$SHA_RG_ARM64" >> $GITHUB_OUTPUT
          
          echo "📦 Checksums computed:"
          echo "  droid x64: $SHA_DROID_X64"
          echo "  droid arm64: $SHA_DROID_ARM64"
          echo "  rg x64: $SHA_RG_X64"
          echo "  rg arm64: $SHA_RG_ARM64"

      - name: Update PKGBUILD
        if: steps.version.outputs.update_needed == 'true' && steps.version.outputs.reason == 'version_bump'
        run: |
          VERSION="${{ steps.version.outputs.latest }}"
          SHA_DROID_X64="${{ steps.checksums.outputs.sha_droid_x64 }}"
          SHA_DROID_ARM64="${{ steps.checksums.outputs.sha_droid_arm64 }}"
          SHA_RG_X64="${{ steps.checksums.outputs.sha_rg_x64 }}"
          SHA_RG_ARM64="${{ steps.checksums.outputs.sha_rg_arm64 }}"
          
          # Update version and pkgrel
          sed -i "s/^pkgver=.*/pkgver=$VERSION/" PKGBUILD
          sed -i "s/^pkgrel=.*/pkgrel=1/" PKGBUILD
          
          # Update x86_64 checksums (line 22-23)
          sed -i "22s/'.*'/'$SHA_DROID_X64'/" PKGBUILD
          sed -i "23s/'.*'/'$SHA_RG_X64'/" PKGBUILD
          
          # Update aarch64 checksums (line 26-27)
          sed -i "26s/'.*'/'$SHA_DROID_ARM64'/" PKGBUILD
          sed -i "27s/'.*'/'$SHA_RG_ARM64'/" PKGBUILD
          
          echo "✏️  PKGBUILD updated to version $VERSION"

      - name: Generate .SRCINFO
        if: steps.version.outputs.update_needed == 'true'
        run: |
          useradd -m builder
          chown -R builder:builder .
          sudo -u builder makepkg --printsrcinfo > .SRCINFO
          echo "📄 .SRCINFO generated"

      - name: Publish to AUR
        if: steps.version.outputs.update_needed == 'true'
        uses: KSXGitHub/github-actions-deploy-aur@v4.1.1
        with:
          pkgname: droid-bin
          pkgbuild: ./PKGBUILD
          assets: |
            .SRCINFO
            REUSE.toml
          post_process: |
            rm -f droid droid-* rg rg-* *.pkg.tar.* *.pkg.tar.*.sig
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: ${{ steps.version.outputs.reason == 'version_bump' && format('Update to version {0}', steps.version.outputs.latest) || 'Update package (pkgrel bump or packaging fix)' }}
          ssh_keyscan_types: rsa,ecdsa,ed25519
          test: true

      - name: Commit to GitHub
        if: steps.version.outputs.update_needed == 'true' && (steps.version.outputs.reason == 'version_bump' || steps.version.outputs.reason == 'packaging_update')
        run: |
          git config --global user.name "${{ secrets.AUR_USERNAME }}"
          git config --global user.email "${{ secrets.AUR_EMAIL }}"
          git config --global --add safe.directory /__w/droid-bin-aur/droid-bin-aur
          if [ "${{ steps.version.outputs.reason }}" = "version_bump" ]; then
            COMMIT_MSG="Update to version ${{ steps.version.outputs.latest }}"
          else
            COMMIT_MSG="Update package (pkgrel bump)"
          fi
          git add PKGBUILD .SRCINFO
          if ! git diff --staged --quiet; then
            git commit -m "$COMMIT_MSG"
            git push
            echo "📦 Pushed to GitHub successfully!"
          else
            echo "ℹ️ No changes to commit"
          fi

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.version.outputs.update_needed }}" == "true" ]; then
            echo "### ✅ Update Complete!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ steps.version.outputs.reason }}" == "version_bump" ]; then
              echo "- **Previous version:** ${{ steps.version.outputs.current }}-${{ steps.version.outputs.current_rel }}" >> $GITHUB_STEP_SUMMARY
              echo "- **New version:** ${{ steps.version.outputs.latest }}-1" >> $GITHUB_STEP_SUMMARY
              echo "- **Reason:** Automatic version update" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Version:** ${{ steps.version.outputs.current }}-${{ steps.version.outputs.current_rel }}" >> $GITHUB_STEP_SUMMARY
              echo "- **Reason:** Manual update (pkgrel bump or packaging fix)" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "- **AUR package:** https://aur.archlinux.org/packages/droid-bin" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ℹ️ No Update Needed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Package is already at the latest version: ${{ steps.version.outputs.current }}-${{ steps.version.outputs.current_rel }}" >> $GITHUB_STEP_SUMMARY
          fi
