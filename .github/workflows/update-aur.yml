name: Update AUR Package

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  update-aur:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    
    steps:
      - name: Install dependencies
        run: |
          pacman -Syu --noconfirm git openssh base-devel curl

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for new version
        id: version
        run: |
          LATEST=$(curl -fsSL https://app.factory.ai/cli | grep '^VER=' | head -1 | cut -d'"' -f2)
          CURRENT=$(grep '^pkgver=' PKGBUILD | cut -d'=' -f2)
          
          echo "Latest: $LATEST"
          echo "Current: $CURRENT"
          echo "latest=$LATEST" >> $GITHUB_OUTPUT
          echo "current=$CURRENT" >> $GITHUB_OUTPUT
          
          if [ "$LATEST" != "$CURRENT" ]; then
            echo "update_needed=true" >> $GITHUB_OUTPUT
          else
            echo "update_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Download and get checksums
        if: steps.version.outputs.update_needed == 'true'
        id: checksums
        run: |
          VERSION="${{ steps.version.outputs.latest }}"
          
          curl -fsSL -o droid-x64 "https://downloads.factory.ai/factory-cli/releases/${VERSION}/linux/x64/droid"
          curl -fsSL -o rg-x64 "https://downloads.factory.ai/ripgrep/linux/x64/rg"
          curl -fsSL -o droid-arm64 "https://downloads.factory.ai/factory-cli/releases/${VERSION}/linux/arm64/droid"
          curl -fsSL -o rg-arm64 "https://downloads.factory.ai/ripgrep/linux/arm64/rg"
          
          SHA_DROID_X64=$(sha256sum droid-x64 | awk '{print $1}')
          SHA_RG_X64=$(sha256sum rg-x64 | awk '{print $1}')
          SHA_DROID_ARM64=$(sha256sum droid-arm64 | awk '{print $1}')
          SHA_RG_ARM64=$(sha256sum rg-arm64 | awk '{print $1}')
          
          echo "sha_droid_x64=$SHA_DROID_X64" >> $GITHUB_OUTPUT
          echo "sha_rg_x64=$SHA_RG_X64" >> $GITHUB_OUTPUT
          echo "sha_droid_arm64=$SHA_DROID_ARM64" >> $GITHUB_OUTPUT
          echo "sha_rg_arm64=$SHA_RG_ARM64" >> $GITHUB_OUTPUT

      - name: Update PKGBUILD
        if: steps.version.outputs.update_needed == 'true'
        run: |
          VERSION="${{ steps.version.outputs.latest }}"
          
          sed -i "s/^pkgver=.*/pkgver=$VERSION/" PKGBUILD
          sed -i "s/^pkgrel=.*/pkgrel=1/" PKGBUILD
          sed -i "s/^sha256sums_x86_64=.*/sha256sums_x86_64=('${{ steps.checksums.outputs.sha_droid_x64 }}' '${{ steps.checksums.outputs.sha_rg_x64 }}')/" PKGBUILD
          sed -i "s/^sha256sums_aarch64=.*/sha256sums_aarch64=('${{ steps.checksums.outputs.sha_droid_arm64 }}' '${{ steps.checksums.outputs.sha_rg_arm64 }}')/" PKGBUILD

      - name: Generate .SRCINFO
        if: steps.version.outputs.update_needed == 'true'
        run: |
          useradd -m builder
          chown -R builder:builder .
          sudo -u builder makepkg --printsrcinfo > .SRCINFO

      - name: Test build
        if: steps.version.outputs.update_needed == 'true'
        run: |
          sudo -u builder makepkg --noconfirm

      - name: Setup SSH for AUR
        if: steps.version.outputs.update_needed == 'true'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > ~/.ssh/aur
          chmod 600 ~/.ssh/aur
          ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts

      - name: Configure Git
        if: steps.version.outputs.update_needed == 'true'
        run: |
          git config --global user.name "${{ secrets.AUR_USERNAME }}"
          git config --global user.email "${{ secrets.AUR_EMAIL }}"
          git config --global --add safe.directory /__w/droid-bin-aur/droid-bin-aur

      - name: Push to AUR
        if: steps.version.outputs.update_needed == 'true'
        run: |
          git clone ssh://aur@aur.archlinux.org/droid-bin.git aur-repo
          cp PKGBUILD .SRCINFO aur-repo/
          cd aur-repo
          git add PKGBUILD .SRCINFO
          git commit -m "Update to ${{ steps.version.outputs.latest }}"
          GIT_SSH_COMMAND="ssh -i ~/.ssh/aur" git push

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.version.outputs.update_needed }}" == "true" ]; then
            echo "✅ Updated from ${{ steps.version.outputs.current }} to ${{ steps.version.outputs.latest }}"
          else
            echo "ℹ️ Already up to date at ${{ steps.version.outputs.current }}"
          fi
